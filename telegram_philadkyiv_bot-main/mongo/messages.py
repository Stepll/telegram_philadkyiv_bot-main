import logging
import inspect
from datetime import datetime

from aiogram.exceptions import TelegramMigrateToChat
from data import config
from dispatcher import bot 

from mongo.initialization import login
from logger import exceptions

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å—ñ—Ö –≤–∏—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def create_message(func, chat_id=None, text=None, message_id=None, from_chat_id=None, forward=None):
    try:
        if func == 'send_message':
            message = await eval('bot.'+func)(chat_id=chat_id, text=text)

        elif func == 'forward_message':
            message = await eval('bot.'+func)(chat_id=chat_id, message_id=message_id, from_chat_id=from_chat_id)

        else: # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–æ–º–∏–ª–∫–æ–≤–æ –±—É–ª–∞ –≤–∫–∞–∑–∞–Ω–∞ —ñ–Ω—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è
            message_error = f'NonExistentFunction: —Ñ—É–Ω–∫—Ü—ñ—è {func} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ –æ–±—Ä–æ–±–∫–∏ –≤ {inspect.stack()[0][3]} {inspect.stack()[0][1]}'
            logging.warning(message_error)
            await bot.send_message(chat_id=config.administrator, text=f'üîª<b>Error:</b> {message_error}')
        
        await message_registration(message, forward)

    # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π —á–∞—Ç —Å—Ç–∞–≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–æ—é
    except TelegramMigrateToChat:
        await exceptions(f'TelegramMigrateToChat: chat_id {chat_id} —Å—Ç–∞–≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–æ—é')

    # –í–∏–ª–∞–≤–ª—é—î —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏
    except Exception as e:
        await exceptions(f'Exception: {e}')


# –†–µ—î—Å—Ç—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö
async def message_registration(message, forward):
    collection = await login('messages')
    post = {"message_id": message.message_id,
            "chat-id": message.chat.id,
            "chat-type": message.chat.type,
            "chat-title": message.chat.title,
            "chat-username": message.chat.username,
            "chat-first_name": message.chat.first_name,
            "chat-last_name": message.chat.last_name,
            "chat-bio": message.chat.bio,
            "chat-description": message.chat.description,
            "from_user-id": message.from_user.id,
            "from_user-is_bot": message.from_user.is_bot,
            "from_user-username": message.from_user.username,
            "from_user-first_name": message.from_user.first_name,
            "from_user-last_name": message.from_user.last_name,
            "from_user-language_code": message.from_user.language_code,
            "from_user-is_premium": message.from_user.is_premium,
            "text": message.text,
            "created_at": datetime.now(),
            "edited_at": datetime.now()}
    
    if message.forward_from != None: # –ü—Ä–∏ —Ñ–æ—Ä–≤–∞—Ä–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–ø –¥–æ —á–∞—Ç—É
        extra = {
            "forward_from-id": message.forward_from.id,
            "forward_from-is_bot": message.forward_from.is_bot,
            "forward_from-first_name": message.forward_from.first_name,
            "forward_from-last_name": message.forward_from.last_name,
            "forward_from-username": message.forward_from.username,
            "forward_from-language_code": message.forward_from.language_code,
            "forward_from-is_premium": message.forward_from.is_premium,
        }
        post.update(extra)
    elif forward: # –Ø–∫—â–æ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–≤–∞—Ç–Ω–∏–π
        extra = {
            "forward_from-id": forward.from_user.id,
            "forward_from-is_bot": forward.from_user.is_bot,
            "forward_from-username": forward.from_user.username,
            "forward_from-first_name": forward.from_user.first_name,
            "forward_from-last_name": forward.from_user.last_name,
            "forward_from-language_code": forward.from_user.language_code,
            "forward_from-is_premium": forward.from_user.is_premium,
        }
        post.update(extra)

    collection.insert_one(post).inserted_id


# –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω–Ω—ñ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏
async def get_message(message_id):
    collection = await login('messages')
    result = collection.find_one({'message_id': message_id, 'chat-id':config.chat},{'_id': 0, 'forward_from-id': 1})
    return result